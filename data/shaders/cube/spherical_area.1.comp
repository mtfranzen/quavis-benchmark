// WIDTH, HEIGHT, R_MAX are defined automatically

// constants
#define N_LOCAL 16
#define PI 3.1415926

layout (local_size_x = N_LOCAL, local_size_y = 1, local_size_z = 1) in;

layout (binding = 0, rg32f) uniform readonly image2D inputImage0;
layout (binding = 1, rg32f) uniform readonly image2D inputImage1;
layout (binding = 2, rg32f) uniform readonly image2D inputImage2;
layout (binding = 3, rg32f) uniform readonly image2D inputImage3;
layout (binding = 4, rg32f) uniform readonly image2D inputImage4;
layout (binding = 5, rg32f) uniform readonly image2D inputImage5;

layout (binding = 6) buffer outputBuffer {
  float isovist;
};
layout (binding = 7) buffer tempBuffer {
  float tmp_global[];
};

shared float tmp_local[N_LOCAL];

void main()
{
  uint chunksize = WIDTH/N_LOCAL;
  // compute sum per item
  uint xpos = gl_LocalInvocationID.x * chunksize;
  float tmp = 0.0;
  for (uint x = xpos; x < xpos + chunksize; x++) {
    float i,j,n,m;
    i = float(x);
    j = float(gl_WorkGroupID.x);
    n = float(WIDTH);
    m = float(HEIGHT);
    float weight = 4.0f/n/m/sqrt(pow((3.0f + 4.0f*j*(j-m)/m/m + 4.0f*i*(i-n)/n/n), 3.0f));
    float tmp2 = imageLoad(inputImage0, ivec2(x, gl_WorkGroupID.x)).x > 0 ? 1 : 0;
    tmp2 += imageLoad(inputImage1, ivec2(x, gl_WorkGroupID.x)).x > 0 ? 1 : 0;
    tmp2 += imageLoad(inputImage2, ivec2(x, gl_WorkGroupID.x)).x > 0 ? 1 : 0;
    tmp2 += imageLoad(inputImage3, ivec2(x, gl_WorkGroupID.x)).x > 0 ? 1 : 0;
    tmp2 += imageLoad(inputImage4, ivec2(x, gl_WorkGroupID.x)).x > 0 ? 1 : 0;
    tmp2 += imageLoad(inputImage5, ivec2(x, gl_WorkGroupID.x)).x > 0 ? 1 : 0;
    tmp += weight*tmp2;
  }
  tmp_local[gl_LocalInvocationID.x] = tmp;
  barrier();

  // group sum
  for (uint stride = N_LOCAL >> 1; stride > 0; stride >>= 1) {
    if (gl_LocalInvocationID.x < stride) {
      tmp_local[gl_LocalInvocationID.x] += tmp_local[gl_LocalInvocationID.x + stride];
    }
    barrier();
  }

  if (gl_LocalInvocationID.x == 0) {
    tmp_global[gl_WorkGroupID.x] = tmp_local[0];
  }
}
